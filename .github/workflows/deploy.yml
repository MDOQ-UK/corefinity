name: Check Module

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true
        type: string
      pipeline_id:
        description: 'Corefinity Pipeline ID'
        required: true
        type: string
      environment_id:
        description: 'Corefinity Environment ID'
        required: true
        type: string
      mdoq_instance_id:
        description: 'MDOQ Instance ID'
        required: true
        type: string
    secrets:
      mdoq_api_key:
        required: true
      corefinity_api_key:
        required: true

permissions:
  contents: read

jobs:
  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
      - name: Check Deployment Exists
        run: |
          echo '${{ toJSON(secrets) }}'
          DEPLOYMENT=$(curl --silent --location 'https://api.mdoq.io/v1/sak/deployment/id/${{ inputs.mdoq_instance_id }}/' \
            --header 'x-mdoq-auth: ${{ secrets.mdoq_api_key }}' \
            --header 'Content-Type: application/json' \
            | jq -r '.files."${{ inputs.tag }}"')
          echo ${DEPLOYMENT}
          if [ "${DEPLOYMENT}" == "null" ]; then 
            echo "Unable to find deployment";
            exit 1;
          else
            echo "found deployment"
            exit 0
          fi
      - name: Download Deployment
        run: |
          DEPLOYMENT=$(curl --silent --location 'https://api.mdoq.io/v1/sak/deployment/id/${{ inputs.mdoq_instance_id }}/' \
            --header 'x-mdoq-auth: ${{ secrets.mdoq_api_key }}' \
            --header 'Content-Type: application/json' \
            | jq -r '.files."${{ inputs.tag }}"')
          echo "'${DEPLOYMENT}'"
          if [ "${DEPLOYMENT}" == "null" ]; then 
            echo "Unable to find deployment";
            exit 1;
          fi
          
          DOWNLOAD_URL=$(curl --silent --location 'https://api.mdoq.io/v1/storage/deployment/download/instance-id/${{ inputs.mdoq_instance_id }}/deployment-id/${{ inputs.tag }}' \
            --header 'x-mdoq-auth: ${{ secrets.mdoq_api_key }}' \
            --header 'Content-Type: application/json' \
            | jq -r '.presigned_url')

          set -xe
          echo "download url: '${DOWNLOAD_URL}'"

          wget -O deployment.tgz "${DOWNLOAD_URL}" -q --progress=dot:mega

          mkdir deployment

          tar -xf deployment.tgz -C deployment

          rm -rf var/view_preprocessed || true
          mv deployment/var/view_preprocessed var/view_preprocessed

          rm -rf pub/static || true
          mv deployment/pub/static pub/static

          rm -rf generated || true
          mv deployment/generated generated

          rm -rf vendor || true
          mv deployment/vendor vendor
          
          rm -rf deployment
      - name: Make Deployment (for Corefinity)
        run: |
          TARGET_DIR=$(basename "${PWD}")
          echo "TARGET_DIR: ${TARGET_DIR}"

          cd ../
          tar -czf deployment.tgz -C ${TARGET_DIR} .

      - name: Start Deployment Pieple (Corefinity)
        run: |
          cd ../
          ls
          # curl -i -X POST -H "Content-Type: multipart/mixed" -F "blob=@/Users/username/Documents/bio.jpg" -F "metadata={\"edipi\":123456789,\"firstName\":\"John\",\"lastName\":\"Smith\",\"email\":\"john.smith@gmail.com\"};type=application/json" http://localhost:8080/api/v1/user/
